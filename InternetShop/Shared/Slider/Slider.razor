@inject IJSRuntime js
<div class="slider-area">
    <div class="slider" @ref="slider"
         @onmouseleave="Leave"
         @onmouseenter="Enter">
        @foreach (var slide in slides)
        {
            <div class="card">

                <img src="@slide" />

                
            </div>
        }
     
    </div>
   
    <div class="slider-dots">
        @for (int i = 0; i < slides.Length; i++)
        {
            <div class="dot @(i == index ? "active" : "")" @onclick="() => GoToSlide(i)"></div>
        }
    </div>
    <button class="prev-btn" @onclick="Prev"></button>
    <button class="next-btn" @onclick="Next"></button>

</div>

   

@code {
    Timer sliderTimer;
    ElementReference slider;
    int index = 0;

    

    string[] slides = new string[]
    {
        "picture/slider1.jpg",
        "picture/slider2.jpg",
        "picture/slider3.jpg"
    };

    async Task Next()
    {
        // index = (index + 1) % slides.Length;
        //await js.InvokeVoidAsync("ScrollSlider", slider, index);
       
       
        index = (index + 1) % slides.Length;
        await UpdateSlider();
       
       

    }

    async Task Prev()
    {
        // index = index > 0 ? index - 1 : slides.Length - 1;
        //await js.InvokeVoidAsync("ScrollSlider", slider, index);
     
        
       
        index = index > 0 ? index - 1 : slides.Length - 1;
        await UpdateSlider();
        
    }
    void Enter()
    {
       
        sliderTimer.Stop();

    }
    void Leave()
    {
        
        sliderTimer.Start();

    }
    protected override void OnInitialized()
    {
        sliderTimer = new Timer(5000);
        sliderTimer.Elapsed += Tick;
        sliderTimer.Start();
    }
    private  void Tick(object? sender, EventArgs e)
    {
        
        
            Next();
            
        
    }
   
  
    void GoToSlide(int newIndex)
    {
        index = newIndex;
        UpdateSlider();
    }

    async Task UpdateSlider()
    {
        await js.InvokeVoidAsync("ScrollSlider", slider, index);
    }
   
}
