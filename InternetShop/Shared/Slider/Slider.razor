@inject IJSRuntime js
<div class="slider" @ref="slider" 
                    @onmouseleave="Leave" 
                    @onmouseenter="Enter">
    @foreach (var slide in slides)
    {
        <div class="card">

            <img src="@slide" />

            <button class="prev-btn" @onclick="Prev" @onclick:stopPropagation></button>
            <button class="next-btn" @onclick="Next" @onclick:stopPropagation></button>

        </div>
    }
    
    
</div>
   

@code {
    Timer sliderTimer;
    ElementReference slider;
    int index = 0;
    string[] slides = new string[]
    {
        "picture/slider1.jpg",
        "picture/slider2.jpg",
        "picture/slider3.jpg"
    };

    async Task Next()
    {
        index = (index + 1) % slides.Length;
        await js.InvokeVoidAsync("ScrollSlider", slider, index);

    }

    async Task Prev()
    {
        index = index > 0 ? index - 1 : slides.Length - 1;
        await js.InvokeVoidAsync("ScrollSlider", slider, index);

    }
    void Enter()
    {
        sliderTimer.Stop();

    }
    void Leave()
    {
        sliderTimer.Start();

    }
    protected override void OnInitialized()
    {
        sliderTimer = new Timer(5000);
        sliderTimer.Elapsed += Tick;
        sliderTimer.Start();
    }
    private  void Tick(object? sender, EventArgs e)
    {
        Next();
    }

}
